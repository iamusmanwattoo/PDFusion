// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Checks PDF files for potential issues before merging.
 *
 * - pdfPreflightCheck - A function that checks PDF viability and suggests solutions.
 * - PdfPreflightCheckInput - The input type for the pdfPreflightCheck function.
 * - PdfPreflightCheckOutput - The return type for the pdfPreflightCheck function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PdfPreflightCheckInputSchema = z.object({
  pdfDataUri: z
    .string()
    .describe(
      "A PDF file's data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  filename: z.string().describe('The name of the PDF file.'),
});
export type PdfPreflightCheckInput = z.infer<typeof PdfPreflightCheckInputSchema>;

const PdfPreflightCheckOutputSchema = z.object({
  isViable: z.boolean().describe('Whether the PDF is viable for merging.'),
  issue: z.string().optional().describe('A description of the potential issue.'),
  suggestion: z.string().optional().describe('A suggestion to address the issue.'),
});
export type PdfPreflightCheckOutput = z.infer<typeof PdfPreflightCheckOutputSchema>;

export async function pdfPreflightCheck(input: PdfPreflightCheckInput): Promise<PdfPreflightCheckOutput> {
  return pdfPreflightCheckFlow(input);
}

const prompt = ai.definePrompt({
  name: 'pdfPreflightCheckPrompt',
  input: {schema: PdfPreflightCheckInputSchema},
  output: {schema: PdfPreflightCheckOutputSchema},
  prompt: `You are an expert PDF validator. You will check the PDF for issues that might prevent it from being merged correctly, such as corruption or password protection.

  Filename: {{{filename}}}
  PDF Data: {{media url=pdfDataUri}}

  Respond in JSON format. isViable should be true if the PDF appears mergeable, and false if there are potential issues. If isViable is false, provide an issue and a suggestion for the user.
`,
});

const pdfPreflightCheckFlow = ai.defineFlow(
  {
    name: 'pdfPreflightCheckFlow',
    inputSchema: PdfPreflightCheckInputSchema,
    outputSchema: PdfPreflightCheckOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
